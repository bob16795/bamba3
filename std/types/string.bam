def Range: import "std".Types.Range;

def String: class {
    def Base: ArrayList(u8);  

    def base: prop Base;  
    
    def init: fn[] -> Self {
        def result: new Self;
        result.base.init();

        return *result;
    };
        
    def `drop`: fn[self: *Self] -> Void {
        self.base.`drop`();

        return;
    };

    def from: fn[s: *u8[]] -> Self {
        def result: new Self;
        result.base.init();

        def st: new *u8[] = s;

        while (*(*st)[usize(0)] != u8(0)) {
            result.base.append(*(*st)[usize(0)]);

            st = usize(*st) + usize(1);
        }

        return *result;
    };

    def append: fn[self: *Self, s: *u8[]] -> Void {
        def st: new *u8[] = s;

        while (*(*st)[usize(0)] != u8(0)) {
            self.base.append(*(*st)[usize(0)]);

            st = usize(*st) + usize(1);
        }

        return *self;
    };

    def println: fn[self: *Self] -> Void {
        printf("%.*s\n", *self.base.items.len, *self.base.items.ptr);

        return;
    };

    def print: fn[self: *Self] -> Void {
        printf("%.*s", *self.base.items.len, *self.base.items.ptr);

        return;
    };

    def len: fn[self: *Self] -> usize {
        return *self.base.items.len;
    };

    def `[]`: fn[self: *Self, idx: usize] -> *u8 {
        return self.base[idx];
    };
    
    def `==`: fn[self: *Self, other: Self] -> Bool {
        def other: &other;

        if (self.len() != other.len()) return Bool(false);

        return memcmp(*self.base.items.ptr, *other.base.items.ptr, self.len()) == i32(0);
    };

    def hash: Base.hash;

    def clone: fn[self: *Self] -> Self {
        def result: new Self = Self.init();

        def i: new usize = usize(0);

        while (*i < self.len()) {
            result.base.append(*self[*i]);

            i = *i + usize(1);
        }

        return *result;
    };

    def split: fn[self: *Self, pattern: *u8[]] -> Self.Split {
        def result: new Self.Split; 
        result.remaining = *self.base.items;
        result.pattern = pattern;

        return *result;
    };

    def Split: class {
        def remaining: prop Base.SliceT;
        def pattern: prop *u8[];

        def Item: Base.SliceT;
    
        def hasNext: fn[self: *Self] -> Bool {
            return *self.remaining.len != usize(0);
        };

        def next: fn[self: *Self] -> Item {
            def stop: new usize = usize(0);
            def len: strlen(*self.pattern);

            if (*self.remaining.len == usize(0)) {
                return *self.remaining;
            }

            while (*stop < (*self.remaining.len) - usize(len)) {
                if (memcmp(*self.pattern, self.remaining[*stop], len) == i32(0)) {
                    def result: self.remaining.cut(Range.init(usize(0), *stop));

                    self.remaining = self.remaining.cut(Range.init(*stop + usize(len), *self.remaining.len));

                    return result;
                }

                stop = *stop + usize(1);
            }

            def result: *self.remaining;

            self.remaining.ptr = null;
            self.remaining.len = usize(0);

            return result;
        };

    };
};
