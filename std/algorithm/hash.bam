def Hash: class {
    def HashType: u32;

    def getHash: fn[T: Type] -> (fn[] -> HashType) {
        if (T == i32 | T == u8) {
            return fn[data: T] -> HashType {
                return i32(data);
            };
        } else if (T.TYPE == Class) {
            return fn[self: T] -> HashType {
                def data: new T = self;

                return T.hash(data);
            };
        } else {
            @ERROR("Cant hash type");
        }
    };
    
    def mix: fn[hash: HashType, val: u32] -> HashType {
        def res: new HashType = hash + val;
        res = *res + (*res * u32(1024));
        res = *res ^ (*res / u32(64));
        return *res;
    };
    
    def finish: fn[hash: HashType] -> HashType {
        def res: new HashType = hash;
        res = *res + (*res * u32(8));
        res = *res ^ (*res / u32(2048));
        res = *res + (*res * u32(32768));
        return *res;
    };
};
