def std: import "std";

def String: std.Types.String;

def StringHash: std.Algorithm.Hash.getHash(String);
def StringList: comptime {
    return std.Types.SinglyLinkedList(i32);
};
def StringAl: comptime {
    return std.Types.ArrayList(String);
};
def StringHashMap: std.Types.HashMap(String, i32);

def printf: std.Types.printf;

def StringSet: std.Types.HashSet(String);

force def main: fn[] -> i32 {
    def tmp: new String = String.from("hello");

    def hash: StringHash(*tmp);

    printf("hash('hello') = %u\n", hash);

    def list: new StringList = StringList.init();
    list.append(i32(10));
    list.append(i32(11));

    printf("data[0] = %d\n", *(*list.head).data);
    printf("data[1] = %d\n", *(*StringList.Node)(*(*list.head).next).data);

    def hashMap: new StringHashMap = StringHashMap.init();

    def p1: new String = String.from("a");
    hashMap.put(*p1, i32(1));
    def p2: new String = String.from("ab");
    hashMap.put(*p2, i32(12));
    def p3: new String = String.from("abc");
    hashMap.put(*p3, i32(123));

    printf("hashMap = ");
    hashMap.print();

    def newList: new StringAl;
    newList.init();

    newList.append(String.from("lol"));
    newList.append(String.from("a"));
    newList.append(String.from("b"));

    def i: new usize = usize(0);

    while (*i < newList.len()) {
        printf("%d: ", *i);

        newList[*i].println();

        i = *i + usize(1);
    }

    def set: new StringSet = StringSet.init();

    return i32(0);
};
