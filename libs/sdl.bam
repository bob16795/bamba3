def Str: u8[];

def InitFlags: class {
    def TIMER: 1;
    def AUDIO: 16;
    def VIDEO: 32;
    def JOYSTICK: 512;
    def EVENTS: 16384;

    def EVERYTHING: TIMER | AUDIO | VIDEO | JOYSTICK | EVENTS;

    // SDL_INIT_HAPTIC       = 0x00001000,
    // SDL_INIT_GAMEPAD      = 0x00002000,  /**< `SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK` */
    // SDL_INIT_EVENTS       = 0x00004000,
    // SDL_INIT_SENSOR       = 0x00008000
};

def lastTime: new u64;
def nowTime: new u64;

def init: fn[flags: u32] -> u32 {
    def SDL_Init: extern fn[] -> u32;

    lastTime = u64(0);
    nowTime = u64(0);

    return SDL_Init(flags);
};

def getDT: fn[] -> f64 {
    def SDL_GetPerformanceCounter: extern fn[] -> u64;
    def SDL_GetPerformanceFrequency: extern fn[] -> u64;

    lastTime = *nowTime;
    nowTime = SDL_GetPerformanceCounter();

    return f64((*nowTime - *lastTime) * u64(1000)) / f64(SDL_GetPerformanceFrequency() * u64(100));
};

def WindowId: u32;
def Window: class {
    def Pos: class {
        def CENTERED_MASK: 805240832;

        def CENTERED: CENTERED_MASK | 0;
    };

    def ptr: prop *Void;

    def create: fn[name: *Str, w: i32, h: i32, flags: u32] -> Self {
        def SDL_CreateWindow: extern fn[] -> Self;

        return SDL_CreateWindow(name, i32(Pos.CENTERED), i32(Pos.CENTERED), w, h, flags);
    };
};

def Renderer: class {
    def ptr: prop *Void;

    def create: fn[self: *Self, win: *Window, flags: i32, tmp: i32] -> Void {
        def SDL_CreateRenderer: extern fn[] -> *Self;

        self = SDL_CreateRenderer(win.ptr, flags, tmp);

        return;
    };

    def clear: fn[self: *Self] -> Void {
        def SDL_RenderClear: extern fn[] -> Void;

        return SDL_RenderClear(*self);
    };

    def drawColor: fn[self: *Self, r: u8, g: u8, b: u8, a: u8] -> Void {
        def SDL_SetRenderDrawColor: extern fn[] -> Void;

        return SDL_SetRenderDrawColor(*self, r, g, b, a);
    };
    
    def drawRect: fn[self: *Self, bnds: *Rect] -> Void {
        def SDL_RenderDrawRect: extern fn[] -> Void;

        return SDL_RenderDrawRect(*self, bnds);
    };

    def copy: fn[self: *Self, texture: Texture, src: *Rect, dst: *Rect] -> Void {
        def SDL_RenderCopy: extern fn[] -> Void;

        return SDL_RenderCopy(*self, texture, src, dst);
    };

    def present: fn[self: *Self] -> Void {
        def SDL_RenderPresent: extern fn[] -> Void;

        return SDL_RenderPresent(*self);
    };
};

def KeySym: class {
    def scancode: prop i32;
    def keycode: prop i32;
    def mod: prop u16;
    def unused: prop u32;

    def SCANCODE_MASK: 1073741824; // 1 << 30

    def KeyCodes: class {
        def UP: fromScanCode(i32(82));
    
        def fromScanCode: fn[x: i32] -> i32 {
            return x | i32(SCANCODE_MASK);
        };
    };
};

def Surface: class {
    def data: prop *Void;

    def create: fn[path: *Str] -> Self {
        def IMG_Load: extern fn[] -> Self;

        return IMG_Load(path);
    };
};

def Texture: class {
    def data: prop *Void;

    def create: fn[renderer: *Renderer, surf: *Surface] -> *Self {
        def SDL_CreateTextureFromSurface: extern fn[] -> *Self;

        return SDL_CreateTextureFromSurface(*renderer, surf);
    };
};

def Event: class {
    def BaseEvent: class {
        def type: prop u32;
    };
    
    def KeyEvent: class {
        def type: prop u32;
        
        def timestamp: prop u32;
        def window_id: prop WindowId;
        def state: prop u8;
        def repeat: prop u8;
        def padding2: prop u8;
        def padding3: prop u8;
        def keysym: prop KeySym;
    };

    def base: prop BaseEvent;

    def misc: prop u8[54];

    def poll: fn[ev: *Self] -> Bool {
        def SDL_PollEvent: extern fn[] -> i32;

        return SDL_PollEvent(ev) != i32(0);
    };
};
    
def Rect: class {
    def x: prop i32;
    def y: prop i32;
    def w: prop i32;
    def h: prop i32;
};
